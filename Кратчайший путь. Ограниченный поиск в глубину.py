import numpy as np
import matplotlib.pyplot as plt

def dls(graph, current, target, visited, path, current_distance, depth, max_depth, result):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º"""
    if depth > max_depth:
        return False  # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–ª—É–±–∏–Ω—ã
    
    visited.add(current)
    path.append(current)
    
    if current == target:
        if current_distance < result["min_distance"]:
            result["min_distance"] = current_distance
            result["min_path"] = path.copy()
            result["found_depth"] = depth
        visited.remove(current)
        path.pop()
        return True
    
    for neighbor, distance in graph[current]:
        if neighbor not in visited:
            if dls(graph, neighbor, target, visited, path, current_distance + distance, depth + 1, max_depth, result):
                return True
    
    visited.remove(current)
    path.pop()
    return False

def find_shortest_path_dls(graph, start, end, max_depth):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã"""
    result = {"min_distance": float('inf'), "min_path": [], "found_depth": -1}
    
    for depth in range(max_depth + 1):
        if dls(graph, start, end, set(), [], 0, 0, depth, result):
            return result["min_path"], result["min_distance"], result["found_depth"]
    
    return [], float('inf'), -1  # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞—Ñ (–≥–æ—Ä–æ–¥–∞ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è)
graph = {
    '–ì–æ—Ä–æ–¥ A': [('–ì–æ—Ä–æ–¥ B', 15), ('–ì–æ—Ä–æ–¥ J', 14)],
    '–ì–æ—Ä–æ–¥ B': [('–ì–æ—Ä–æ–¥ A', 15), ('–ì–æ—Ä–æ–¥ D', 12), ('–ì–æ—Ä–æ–¥ H', 25)],
    '–ì–æ—Ä–æ–¥ C': [('–ì–æ—Ä–æ–¥ A', 10), ('–ì–æ—Ä–æ–¥ D', 8), ('–ì–æ—Ä–æ–¥ E', 20)],
    '–ì–æ—Ä–æ–¥ D': [('–ì–æ—Ä–æ–¥ C', 8), ('–ì–æ—Ä–æ–¥ B', 12), ('–ì–æ—Ä–æ–¥ E', 5), ('–ì–æ—Ä–æ–¥ F', 5), ('–ì–æ—Ä–æ–¥ G', 22)],
    '–ì–æ—Ä–æ–¥ E': [('–ì–æ—Ä–æ–¥ C', 20), ('–ì–æ—Ä–æ–¥ D', 5), ('–ì–æ—Ä–æ–¥ F', 18)],
    '–ì–æ—Ä–æ–¥ F': [('–ì–æ—Ä–æ–¥ E', 18), ('–ì–æ—Ä–æ–¥ D', 5), ('–ì–æ—Ä–æ–¥ G', 7)],
    '–ì–æ—Ä–æ–¥ G': [('–ì–æ—Ä–æ–¥ D', 22), ('–ì–æ—Ä–æ–¥ F', 7), ('–ì–æ—Ä–æ–¥ H', 10)],
    '–ì–æ—Ä–æ–¥ H': [('–ì–æ—Ä–æ–¥ G', 10), ('–ì–æ—Ä–æ–¥ B', 25), ('–ì–æ—Ä–æ–¥ I', 6)],
    '–ì–æ—Ä–æ–¥ I': [('–ì–æ—Ä–æ–¥ H', 6), ('–ì–æ—Ä–æ–¥ J', 8)],
    '–ì–æ—Ä–æ–¥ J': [('–ì–æ—Ä–æ–¥ I', 8), ('–ì–æ—Ä–æ–¥ A', 14)]
}

start_city = '–ì–æ—Ä–æ–¥ E'
end_city = '–ì–æ—Ä–æ–¥ I'
max_depth = 10  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞

shortest_path, shortest_distance, found_depth = find_shortest_path_dls(graph, start_city, end_city, max_depth)

if shortest_path:
    print(f'üîπ –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –∏–∑ {start_city} –≤ {end_city}: {" -> ".join(shortest_path)}')
    print(f'üîπ –û–±—â–∞—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏: {shortest_distance} –∫–º')
    print(f'üîπ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –≥–ª—É–±–∏–Ω–µ {found_depth}')
else:
    print(f'‚ùå –ü—É—Ç—å –∏–∑ {start_city} –≤ {end_city} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≥–ª—É–±–∏–Ω–µ {max_depth}')
